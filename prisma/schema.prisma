generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Store {
  id              BigInt            @id @default(autoincrement()) @map("_id")
  name            String
  userId          String
  billboards      Billboard[]       @relation("StoreToBillboard")
  categories      Category[]        @relation("StoreToCategory")
  products        Product[]         @relation("StoreToProduct")
  sizes           Size[]            @relation("StoreToSize")
  aiModels        AIModel[]         @relation("StoreToAIModel")
  learningTypes   LearningType[]    @relation("StoreToLearningType") // Relation to LearningType
  specificities   TaskSpecificity[] @relation("StoreToSpecificity") // Relation to TaskSpecificity
  processingTypes ProcessingType[]  @relation("StoreToProcessingType") // Relation to ProcessingType
  //* colors          Color[]     @relation("StoreToColor")
  orders          Order[]           @relation("StoreToOrder")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Billboard {
  id         BigInt     @id @map("_id")
  storeId    BigInt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          BigInt    @id @default(autoincrement()) @map("_id") @db.Int8
  storeId     BigInt    @db.Int8 // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId BigInt    @db.Int8 // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         BigInt      @id @default(autoincrement()) @map("_id") @db.Int8
  storeId    BigInt      @db.Int8 // Foreign Key to Store
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId BigInt      @db.Int8 // Foreign Key to Category
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     BigInt      @db.Int8 // Foreign Key to Size
  size       Size        @relation(fields: [sizeId], references: [id])
  //*  colorId     BigInt    @db.Int8// Foreign Key to Color
  //*  color       Color     @relation(fields: [colorId], references: [id])
  images     Image[] // Relation to Image model
  orderItems OrderItem[] // Relation to Order model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  //*@@index([colorId])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
}

// Base AI Model
model AIModel {
  id               BigInt          @id @default(autoincrement()) @map("_id") @db.Int8
  storeId          BigInt          @db.Int8 // Foreign Key to Store
  store            Store           @relation("StoreToAIModel", fields: [storeId], references: [id])
  name             String
  description      String?
  price            Float
  isFeatured       Boolean         @default(false)
  isArchived       Boolean         @default(false)
  learningTypeId   BigInt          @db.Int8
  learningType     LearningType    @relation("LearningTypeToAIModel", fields: [learningTypeId], references: [id])
  specificityId    BigInt          @db.Int8
  specificity      TaskSpecificity @relation("SpecificityToAIModel", fields: [specificityId], references: [id])
  processingTypeId BigInt          @db.Int8
  processingType   ProcessingType  @relation("ProcessingTypeToAIModel", fields: [processingTypeId], references: [id])
  sizeId           BigInt          @db.Int8 // Foreign Key to Size
  size             Size            @relation(fields: [sizeId], references: [id])
  images           Image[] // Relation to Image model
  orderItems       OrderItem[] // Relation to Order model
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([storeId])
  @@index([learningTypeId])
  @@index([processingTypeId])
  @@index([specificityId])
  @@index([sizeId])
}

model Order {
  id         BigInt      @id @default(autoincrement()) @map("_id") @db.Int8
  storeId    BigInt      @db.Int8
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        BigInt  @id @default(autoincrement()) @map("_id") @db.Int8
  orderId   BigInt  @db.Int8
  order     Order   @relation(fields: [orderId], references: [id])
  productId BigInt  @db.Int8
  product   Product @relation(fields: [productId], references: [id])
  AIModelId BigInt  @db.Int8
  AIModel   AIModel @relation(fields: [AIModelId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// Model for "Type of Learning"
model LearningType {
  id          BigInt    @id @default(autoincrement()) @map("_id") @db.Int8
  type        String // e.g., Supervised, Unsupervised, Reinforcement, etc.
  description String?
  store       Store     @relation("StoreToLearningType", fields: [storeId], references: [id]) // Relation to Store
  storeId     BigInt    @db.Int8
  models      AIModel[] @relation("LearningTypeToAIModel") // Relation to AIModel
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model for "Task-Specific vs. General-Purpose" (Characteristic 7)
model TaskSpecificity {
  id          BigInt    @id @default(autoincrement()) @map("_id") @db.Int8
  type        String // e.g., Task-Specific, General-Purpose
  description String?
  storeId     BigInt    @db.Int8
  store       Store     @relation("StoreToSpecificity", fields: [storeId], references: [id]) // Opposite relation to Store
  models      AIModel[] @relation("SpecificityToAIModel") // Relation to AI models with this specificity
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model for "Real-Time vs. Batch Processing" (Characteristic 9)
model ProcessingType {
  id          BigInt    @id @default(autoincrement()) @map("_id") @db.Int8
  type        String // e.g., Real-Time, Batch Processing
  description String?
  storeId     BigInt    @db.Int8
  store       Store     @relation("StoreToProcessingType", fields: [storeId], references: [id]) // Opposite relation to Store
  models      AIModel[] @relation("ProcessingTypeToAIModel") // Relation to AI models with this processing type
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Size {
  id        BigInt    @id @default(autoincrement()) @map("_id") @db.Int8
  storeId   BigInt    @db.Int8
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  aiModels  AIModel[] // Relation to AIModel model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

//*model Color {
//*  id          BigInt   @id @default(autoincrement()) @map("_id") @db.Int8
//*  storeId     BigInt   @db.Int8
//*  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
//*  name        String
//*  value       String
//*  products    Product[] // Relation to Product model
//*  createdAt   DateTime  @default(now())
//*  updatedAt   DateTime  @updatedAt

//*  @@index([storeId])
//*}

model Image {
  id        BigInt   @id @default(autoincrement()) @map("_id") @db.Int8
  productId BigInt   @db.Int8
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  aiModelId BigInt   @db.Int8
  aiModel   AIModel  @relation(fields: [aiModelId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
